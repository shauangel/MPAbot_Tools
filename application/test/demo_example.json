[
    {
        "link": "https://stackoverflow.com/questions/76057261/why-does-react-to-flask-call-fail-with-cors-despite-flask-cors-being-included",
        "content": "The problem is that you are limiting the path /api/data to the http method POST @app.route('/api/data', methods=['POST']) CORS requires the client to make an OPTIONS 'pre-flight' call on that path to find out which origins are allowed (and other stuff like headers). Because your code only permits POST the OPTIONS call is declined and the CORS mechanism fails. The fix is to add the OPTIONS to the list of permitted methods on the route.\n"
    },
    {
        "link": "https://www.reddit.com/r/flask/comments/15lzkxx/i_have_tunneled_my_flask_app_to_ngrok_that_now_is/",
        "content": "The error message states that the server isn't sending the `Access-Control-Allow-Origin` header in its response. Let's break it down and find a solution:\\n\\n### 1. Protocol Mismatch:\\nEven though you mentioned in Edit 1 that using HTTP on both Flask and ngrok still results in a CORS error, it's important to be aware that browsers consider HTTP and HTTPS as different origins. That said, the error message points out that the backend (ngrok URL) is HTTPS while the frontend is HTTP. This alone can lead to CORS issues.\\n\\n### 2. Flask-CORS and Wildcard with Credentials:\\n\\nWhen you set the origins to `\\\"*\\\"` and at the same time have `supports_credentials=True`, it can cause problems. Browsers do not allow wildcards with credentials. Instead of the wildcard, you need to specify the actual origin:\\n\\n```python\\nCORS(app, supports_credentials=True, origins=[\\\"http://192.168.1.140:5173\\\"])\\n```\\n\\n### 3. Multiple Origins:\\n\\nIf you have multiple origins, dynamically set the origin based on the request:\\n\\n```python\\ndef cors_origin(response):\\n    request_origin = request.headers.get('Origin')\\n    valid_origins = [\\\"http://192.168.1.140:5173\\\", \\\"http://your-ngrok-subdomain.ngrok.io\\\"]\\n    if request_origin in valid_origins:\\n        response.headers.add(\\\"Access-Control-Allow-Origin\\\", request_origin)\\n    return response\\n\\napp.after_request(cors_origin)\\n```\\n\\n### 4. Handling Preflight Requests:\\n\\nThe error message indicates a problem with the preflight `OPTIONS` request. Make sure that the server responds correctly to the `OPTIONS` request. You might need to handle it manually:\\n\\n```python\\n@app.route('/your-endpoint', methods=['OPTIONS'])\\ndef options():\\n    response = flask.make_response()\\n    response.headers.add(\\\"Access-Control-Allow-Origin\\\", \\\"http://192.168.1.140:5173\\\")\\n    response.headers.add(\\\"Access-Control-Allow-Methods\\\", \\\"GET, POST, OPTIONS\\\")\\n    response.headers.add(\\\"Access-Control-Allow-Headers\\\", \\\"Content-Type, Authorization\\\")\\n    response.headers.add(\\\"Access-Control-Allow-Credentials\\\", \\\"true\\\")\\n    return response\\n```\\n\\n### 5. Ngrok Headers:\\n\\nNgrok may be modifying headers or not passing them along as expected. You can test this by manually proxying requests (using tools like Postman) and examining headers at each stage to see if they're getting stripped or altered.\\n\\n### 6. Other Flask Middlewares:\\n\\nIf there are other middlewares in your Flask app, ensure they aren't running after Flask-CORS and modifying the headers, which can nullify the CORS headers.\\n\\n### 7. Debugging:\\n\\nUse logging in Flask to log all incoming headers and the response headers. This will provide insights on what headers are received and what's sent back.\\n\\n### Conclusion:\\n\\nThe key is to ensure your server is responding with the proper CORS headers for both preflight and actual requests. Pay special attention to the wildcard and credentials issue. If your app is still showing CORS errors after all these changes, consider setting up a simpler version of your app without any additional middlewares to narrow down the issue.\n"
    },
    {
        "link": "https://stackoverflow.com/questions/75789548/cors-error-in-flask-even-after-using-flask-cors",
        "content": "You Flask code seems correct. It think the error happens because your ngork server doesn't allow cors request. If it allows then I recommend to use axios package instead built-in fetch."
    }
]